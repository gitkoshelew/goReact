version: '3.9'

services:
    pgadmin:
        container_name: pgadmin
        image: dpage/pgadmin4
        env_file:
            - .env
        environment:
            - PGADMIN_DEFAULT_EMAIL=${PGADMIN_DEFAULT_EMAIL}
            - PGADMIN_DEFAULT_PASSWORD=${PGADMIN_DEFAULT_PASSWORD}
        ports:
            - "5050:80"
        restart: unless-stopped
        volumes:
            - pgadmin:/root/.pgadmin
        networks:
            - new

    authservice:
        container_name: authservice
        build:
            dockerfile: dockerfile
            context: ./authentication
        ports:
            - "1111:1111"
        env_file:
            - .env
        environment:
            - SERVER_HOST=${AUTH_SERVER_HOST}
            - ENV=prod
        tty: true
        restart: always
        volumes:
            - api:/authentication/
        networks:
            - new

    authdb:
        container_name: authdb
        image: postgres:latest
        env_file:
            - .env
        environment:
            - POSTGRES_USER=${AUTH_POSTGRES_USER}
            - POSTGRES_PASSWORD=${AUTH_POSTGRES_PASSWORD}
            - POSTGRES_DB=${AUTH_POSTGRES_DB}
            - POSTGRES_HOST=${AUTH_POSTGRES_HOST}
            - POSTGRES_SSLMODE=${AUTH_POSTGRES_SSLMODE}
        ports:
            - "8081:5432"
        restart: always
        volumes:
            - database-data:/var/lib/postgresql/auth/data/
        networks:
            new:
                aliases:
                    - database

    auth_migrate:
        container_name: auth_migrate
        image: migrate/migrate
        restart: on-failure
        networks:
            - new
        volumes:
            - ./authentication/migrations:/authentication/migrations
        command:
            [
                "-path",
                "authentication/migrations",
                "-database",
                "postgres://user:userpass@authdb:5432/authdb?sslmode=disable",
                "up"
            ]
        links:
            - authdb
        depends_on:
            - authdb

    userservice:
        container_name: userservice
        build:
            dockerfile: dockerfile
            context: ./user
        ports:
            - "1112:1112"
        env_file:
            - .env
        environment:
            - SERVER_HOST=0.0.0.0
            - ENV=prod
        tty: true
        restart: always
        volumes:
            - api:/user/
        networks:
            - new
        depends_on:
            - userdb

    userdb:
        container_name: userdb
        image: postgres:latest
        env_file:
            - .env
        environment:
            - POSTGRES_USER=${USER_POSTGRES_USER}
            - POSTGRES_PASSWORD=${USER_POSTGRES_PASSWORD}
            - POSTGRES_DB=${USER_POSTGRES_DB}
            - POSTGRES_HOST=${USER_POSTGRES_HOST}
            - POSTGRES_SSLMODE=${USER_POSTGRES_SSLMODE}
        ports:
            - "8082:5432"
        restart: always
        volumes:
            - database-data:/var/lib/postgresql/user/data/
        networks:
            new:
                aliases:
                    - database

    user_migrate:
        container_name: user_migrate
        image: migrate/migrate
        restart: on-failure
        networks:
            - new
        volumes:
            - ./user/migrations:/user/migrations
        command:
            [
                "-path",
                "user/migrations",
                "-database",
                "postgres://user:userpass@userdb:5432/userdb?sslmode=disable",
                "up"
            ]
        links:
            - userdb
        depends_on:
            - userdb

    userdbtest:
        container_name: userdbtest
        image: postgres:latest
        env_file:
            - .env
        environment:
            - POSTGRES_USER=${TEST_USER_POSTGRES_USER}
            - POSTGRES_PASSWORD=${TEST_USER_POSTGRES_PASSWORD}
            - POSTGRES_DB=${TEST_USER_POSTGRES_DB}
            - POSTGRES_HOST=${TEST_USER_POSTGRES_HOST}
            - POSTGRES_SSLMODE=${TEST_USER_POSTGRES_SSLMODE}
        ports:
            - "8083:5432"
        restart: unless-stopped
        volumes:
            - database-test:/var/lib/test-date/user/data/
        networks:
            new:
                aliases:
                    - database

    test_user_migrate:
        container_name: test_user_migrate
        image: migrate/migrate
        restart: on-failure
        networks:
            - new
        volumes:
            - ./user/migrations:/user/migrations
        command:
            [
                "-path",
                "user/migrations",
                "-database",
                "postgres://user:userpass@userdbtest:5432/userdbtest?sslmode=disable",
                "up"
            ]
        links:
            - userdbtest
        depends_on:
            - userdbtest

    bookingservice:
        container_name: bookingservice
        build:
            dockerfile: dockerfile
            context: ./booking
        ports:
            - "1113:1113"
        env_file:
            - .env
        environment:
            - SERVER_HOST=0.0.0.0
            - ENV=prod
        tty: true
        restart: always
        volumes:
            - api:/booking/
        networks:
            - new
        depends_on:
            - bookingdb

    bookingdb:
        container_name: bookingdb
        image: postgres:latest
        env_file:
            - .env
        environment:
            - POSTGRES_USER=${BOOKING_POSTGRES_USER}
            - POSTGRES_PASSWORD=${BOOKING_POSTGRES_PASSWORD}
            - POSTGRES_DB=${BOOKING_POSTGRES_DB}
            - POSTGRES_HOST=${BOOKING_POSTGRES_HOST}
            - POSTGRES_SSLMODE=${BOOKING_POSTGRES_SSLMODE}
        ports:
            - "8084:5432"
        restart: always
        volumes:
            - database-data:/var/lib/postgresql/booking/data/
        networks:
            new:
                aliases:
                    - database

    booking_migrate:
        container_name: booking_migrate
        image: migrate/migrate
        restart: on-failure
        networks:
            - new
        volumes:
            - ./booking/migrations:/booking/migrations
        command:
            [
                "-path",
                "booking/migrations",
                "-database",
                "postgres://user:userpass@bookingdb:5432/bookingdb?sslmode=disable",
                "up"
            ]
        links:
            - bookingdb
        depends_on:
            - bookingdb

    hoteldatabase:
        container_name: hoteldatabase
        image: postgres:latest
        env_file:
            - .env
        environment:
            - POSTGRES_USER=${HOTEL_POSTGRES_USER}
            - POSTGRES_PASSWORD=${HOTEL_POSTGRES_PASSWORD}
            - POSTGRES_DB=${HOTEL_POSTGRES_DB}
            - POSTGRES_HOST=${HOTEL_POSTGRES_HOST}
            - POSTGRES_SSLMODE=${HOTEL_POSTGRES_SSLMODE}
        ports:
            - "8085:5432"
        restart: always
        volumes:
            - database-data:/var/lib/postgresql/hotel/data/
        networks:
            new:
                aliases:
                    - database

    hoteldatabasetest:
        container_name: hoteldatabasetest
        image: postgres:latest
        env_file:
            - .env
        environment:
            - POSTGRES_USER=${TEST_HOTEL_POSTGRES_USER}
            - POSTGRES_PASSWORD=${TEST_HOTEL_POSTGRES_PASSWORD}
            - POSTGRES_DB=${TEST_HOTEL_POSTGRES_DB}
            - POSTGRES_HOST=${TEST_HOTEL_POSTGRES_HOST}
            - POSTGRES_SSLMODE=${TEST_HOTEL_POSTGRES_SSLMODE}
        ports:
            - "8086:5432"
        restart: unless-stopped
        volumes:
            - database-test:/var/lib/test-date/hotel/data/
        networks:
            new:
                aliases:
                    - database

    hotel_migrate:
        container_name: hotel_migrate
        image: migrate/migrate
        restart: on-failure
        networks:
            - new
        volumes:
            - ./hotel/migrations:/hotel/migrations
        command:
            [
                "-path",
                "hotel/migrations",
                "-database",
                "postgres://user:userpass@hoteldatabase:5432/hoteldb?sslmode=disable",
                "up"
            ]
        links:
            - hoteldatabase
        depends_on:
            - hoteldatabase

    test_hotel_migrate:
        container_name: test_hotel_migrate
        image: migrate/migrate
        restart: on-failure
        networks:
            - new
        volumes:
            - ./hotel/migrations:/hotel/migrations
        command:
            [
                "-path",
                "hotel/migrations",
                "-database",
                "postgres://user:userpass@hoteldatabasetest:5432/hoteldbtest?sslmode=disable",
                "up"
            ]
        links:
            - hoteldatabasetest
        depends_on:
            - hoteldatabasetest

    hotelservice:
        container_name: hotelservice
        build:
            dockerfile: dockerfile
            context: ./hotel
        ports:
            - "1114:1114"
        env_file:
            - .env
        environment:
            - SERVER_HOST=0.0.0.0
            - ENV=prod
        tty: true
        restart: on-failure
        volumes:
            - api:/hotel/
        networks:
            - new
        depends_on:
            - hoteldatabase  

    gateway_service:
        container_name: gateway_service
        build:
            dockerfile: dockerfile
            context: ./gateway
        ports:
            - "1110:1110"
        env_file:
            - .env
        environment:
            - SERVER_HOST=${GATEWAY_SERVER_HOST}
            - ENV=prod
        tty: true
        restart: on-failure
        volumes:
            - api:/gateway/
        networks:
            - new

    admindatabase:
        container_name: admindatabase
        image: postgres:latest
        env_file:
            - .env
        environment:
            - POSTGRES_USER=${ADMIN_POSTGRES_USER}
            - POSTGRES_PASSWORD=${ADMIN_POSTGRES_PASSWORD}
            - POSTGRES_DB=${ADMIN_POSTGRES_DB}
            - POSTGRES_HOST=${ADMIN_POSTGRES_HOST}
            - POSTGRES_SSLMODE=${ADMIN_POSTGRES_SSLMODE}
        ports:
            - "8087:5432"
        restart: always
        volumes:
            - database-data:/var/lib/postgresql/admin/data/
        networks:
            new:
                aliases:
                    - database

    admindatabasetest:
        container_name: admindatabasetest
        image: postgres:latest
        env_file:
            - .env
        environment:
            - POSTGRES_USER=${TEST_ADMIN_POSTGRES_USER}
            - POSTGRES_PASSWORD=${TEST_ADMIN_POSTGRES_PASSWORD}
            - POSTGRES_DB=${TEST_ADMIN_POSTGRES_DB}
            - POSTGRES_HOST=${TEST_ADMIN_POSTGRES_HOST}
            - POSTGRES_SSLMODE=${TEST_ADMIN_POSTGRES_SSLMODE}
        ports:
            - '8088:5432'
        restart: unless-stopped
        volumes:
            - database-test:/var/lib/test-date/admin/data/
        networks:
            new:
                aliases:
                    - database

    admin_migrate:
        image: migrate/migrate
        restart: on-failure
        networks:
            - new
        volumes:
            - ./migrations:/migrations

        command:
            [
                "-path",
                "/migrations",
                "-database",
                "postgres://user:userpass@admindatabase:5432/admindb?sslmode=disable",
                "up"
            ]
        links:
            - admindatabase
        depends_on:
            - admindatabase

    test_admin_migrate:
        image: migrate/migrate
        restart: on-failure
        networks:
            - new
        volumes:
            - ./migrations:/migrations
        command:
            [
                "-path",
                "/migrations",
                "-database",
                "postgres://user:userpass@admindatabasetest:5432/admindbtest?sslmode=disable",
                "up"
            ]
        links:
            - admindatabasetest
        depends_on:
            - admindatabasetest
 
    microseviceadmin:
        build:
            dockerfile: dockerfile
            context: ./api
        ports:
            - 6060:6060
        depends_on:
            - admindatabase
        env_file:
            - .env
        environment:
            - POSTGRES_USER=${ADMIN_POSTGRES_USER}
            - POSTGRES_PASSWORD=${ADMIN_POSTGRES_PASSWORD}
            - POSTGRES_DB=${ADMIN_POSTGRES_DB}
            - SERVER_HOST=0.0.0.0
            - ENV=prod
        tty: true
        restart: on-failure
        volumes:
            - api:/api
        networks:
            - new
            
networks:
    new:
        driver: bridge

volumes:
    api: null
    database-data: null
    pgadmin: null
    database-test: null
